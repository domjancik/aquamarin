/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.magnetpwns.presentation;

import com.magnetpwns.bussiness.AquamarinFacade;
import com.magnetpwns.model.Delivery;
import com.magnetpwns.model.Document;
import com.magnetpwns.model.Invoice;
import com.magnetpwns.model.ProformaInvoice;
import com.magnetpwns.presentation.dialogs.view.DeliveryViewDialog;
import com.magnetpwns.presentation.dialogs.view.InvoiceViewDialog;
import com.magnetpwns.presentation.dialogs.view.ProformaViewDialog;
import com.magnetpwns.presentation.dialogs.view.SumViewDialog;
import com.magnetpwns.presentation.model.DocumentTableModel;
import java.util.Collection;
import java.util.LinkedList;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//com.magnetpwns.presentation//Document//EN",
autostore = false)
@TopComponent.Description(preferredID = "DocumentTopComponent",
iconBase = "com/magnetpwns/presentation/document24.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "com.magnetpwns.presentation.DocumentTopComponent")
@ActionReference(path = "Toolbars/Views" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_DocumentAction",
preferredID = "DocumentTopComponent")
@Messages({
    "CTL_DocumentAction=Dokumenty",
    "CTL_DocumentTopComponent=Dokumenty",
    "HINT_DocumentTopComponent=Toto je přehled dokumentů"
})
public final class DocumentTopComponent extends TopComponent {

    DocumentTableModel documentTableModel;
    
    public DocumentTopComponent() {
        initComponents();
        setName(Bundle.CTL_DocumentTopComponent());
        setToolTipText(Bundle.HINT_DocumentTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewToolBar = new javax.swing.JToolBar();
        openButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        sumButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        documentTable = new javax.swing.JTable();

        viewToolBar.setFloatable(false);
        viewToolBar.setRollover(true);

        openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/magnetpwns/presentation/proforma24.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(openButton, org.openide.util.NbBundle.getMessage(DocumentTopComponent.class, "DocumentTopComponent.openButton.text")); // NOI18N
        openButton.setFocusable(false);
        openButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        viewToolBar.add(openButton);

        refreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/magnetpwns/presentation/refresh24.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(refreshButton, org.openide.util.NbBundle.getMessage(DocumentTopComponent.class, "DocumentTopComponent.refreshButton.text")); // NOI18N
        refreshButton.setFocusable(false);
        refreshButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        refreshButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        viewToolBar.add(refreshButton);

        sumButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/magnetpwns/presentation/sum24.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(sumButton, org.openide.util.NbBundle.getMessage(DocumentTopComponent.class, "DocumentTopComponent.sumButton.text")); // NOI18N
        sumButton.setFocusable(false);
        sumButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sumButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        sumButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sumButtonActionPerformed(evt);
            }
        });
        viewToolBar.add(sumButton);

        documentTable.setAutoCreateRowSorter(true);
        documentTable.setModel(documentTableModel = new DocumentTableModel(AquamarinFacade.getDefault().findAllDocuments()));
        jScrollPane1.setViewportView(documentTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(viewToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(viewToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        documentTableModel = new DocumentTableModel(AquamarinFacade.getDefault().findAllDocuments());
        documentTable.setModel(documentTableModel);
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        Document selected = getSelectedItem();
        if (selected instanceof Invoice) {
            new InvoiceViewDialog(AquamarinFacade.getDefault().loadInvoice((Invoice) selected)).show();
            return;
        }
        if (selected instanceof ProformaInvoice) {
            new ProformaViewDialog(AquamarinFacade.getDefault().loadProforma((ProformaInvoice) selected)).show();
            return;
        }
        if (selected instanceof Delivery) {
            new DeliveryViewDialog(AquamarinFacade.getDefault().loadDelivery((Delivery) selected)).show();
            return;
        }
    }//GEN-LAST:event_openButtonActionPerformed

    private void sumButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sumButtonActionPerformed
        new SumViewDialog(getSelectedItems()).show();
    }//GEN-LAST:event_sumButtonActionPerformed

    private Document getSelectedItem() {
        return documentTableModel.get(documentTable.convertRowIndexToModel(documentTable.getSelectedRow()));
    }
    
    private Collection<Document> getSelectedItems() {
        Collection<Document> documents = new LinkedList<Document>();
        
        for (int selectedIndex : documentTable.getSelectedRows()) {
            Document d = documentTableModel.get(documentTable.convertRowIndexToModel(selectedIndex));
            documents.add(d);
        }
        
        return documents;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable documentTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton openButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton sumButton;
    private javax.swing.JToolBar viewToolBar;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
