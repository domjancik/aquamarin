/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.magnetpwns.presentation;

import com.magnetpwns.bussiness.AquamarinFacade;
import com.magnetpwns.model.Client;
import com.magnetpwns.model.ClientId;
import com.magnetpwns.model.Stock;
import com.magnetpwns.presentation.dialogs.StockDialog;
import com.magnetpwns.presentation.dialogs.StockTransferDialog;
import com.magnetpwns.presentation.dialogs.view.StockTransferHistoryDialog;
import com.magnetpwns.presentation.model.StockTableModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.util.NbPreferences;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//com.magnetpwns.presentation//Stock//EN",
autostore = false)
@TopComponent.Description(preferredID = "StockTopComponent",
iconBase = "com/magnetpwns/presentation/stock24.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "com.magnetpwns.presentation.StockTopComponent")
@ActionReference(path = "Toolbars/Views" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_StockAction",
preferredID = "StockTopComponent")
@Messages({
    "CTL_StockAction=Sklady",
    "CTL_StockTopComponent=Sklady",
    "HINT_StockTopComponent=Toto je seznam sklad≈Ø"
})
public final class StockTopComponent extends TopComponent {

    private StockTableModel stockTableModel;
    private Stock sourceStock = null;
    private int favoriteStockOwnerId;
    
    public StockTopComponent() {
        initComponents();
        setName(Bundle.CTL_StockTopComponent());
        setToolTipText(Bundle.HINT_StockTopComponent());

        favoriteStockOwnerId = NbPreferences.forModule(StockTopComponent.class).getInt("favoriteStockOwner", 0);
        
        final ListSelectionModel sm = stockTable.getSelectionModel();
        sm.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent lse) {
                boolean enable = !sm.isSelectionEmpty();
                openButton.setEnabled(enable);
                favoriteButton.setEnabled(enable);
                transferButton.setEnabled(enable);
                transferFavoriteButton.setEnabled(enable);
                Client selectedClient = stockTableModel.get(stockTable.convertRowIndexToModel(stockTable.getSelectedRow()));
                if (favoriteStockOwnerId == 0 || selectedClient.getId().getId() == favoriteStockOwnerId) 
                    transferFavoriteButton.setEnabled(false);
                if (sourceStock != null && sourceStock.getOwner().equals(selectedClient))
                    transferButton.setEnabled(false);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        filterButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        transferFavoriteButton = new javax.swing.JButton();
        favoriteButton = new javax.swing.JButton();
        transferButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        stockTable = new javax.swing.JTable();
        transferLabel = new javax.swing.JLabel();
        jToolBar2 = new javax.swing.JToolBar();
        transferHistoryButton = new javax.swing.JButton();
        yearComboBox = new javax.swing.JComboBox();
        refreshYearButton = new javax.swing.JButton();

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        filterButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/magnetpwns/presentation/filter24.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(filterButton, org.openide.util.NbBundle.getMessage(StockTopComponent.class, "StockTopComponent.filterButton.text")); // NOI18N
        filterButton.setFocusable(false);
        filterButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        filterButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(filterButton);

        openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/magnetpwns/presentation/adddelete24.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(openButton, org.openide.util.NbBundle.getMessage(StockTopComponent.class, "StockTopComponent.openButton.text")); // NOI18N
        openButton.setToolTipText(org.openide.util.NbBundle.getMessage(StockTopComponent.class, "StockTopComponent.openButton.toolTipText")); // NOI18N
        openButton.setEnabled(false);
        openButton.setFocusable(false);
        openButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(openButton);

        transferFavoriteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/magnetpwns/presentation/transferfavorite24.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(transferFavoriteButton, org.openide.util.NbBundle.getMessage(StockTopComponent.class, "StockTopComponent.transferFavoriteButton.text")); // NOI18N
        transferFavoriteButton.setToolTipText(org.openide.util.NbBundle.getMessage(StockTopComponent.class, "StockTopComponent.transferFavoriteButton.toolTipText")); // NOI18N
        transferFavoriteButton.setEnabled(false);
        transferFavoriteButton.setFocusable(false);
        transferFavoriteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transferFavoriteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        transferFavoriteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferFavoriteButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(transferFavoriteButton);

        favoriteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/magnetpwns/presentation/favorite24.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(favoriteButton, org.openide.util.NbBundle.getMessage(StockTopComponent.class, "StockTopComponent.favoriteButton.text")); // NOI18N
        favoriteButton.setToolTipText(org.openide.util.NbBundle.getMessage(StockTopComponent.class, "StockTopComponent.favoriteButton.toolTipText")); // NOI18N
        favoriteButton.setEnabled(false);
        favoriteButton.setFocusable(false);
        favoriteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        favoriteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        favoriteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                favoriteButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(favoriteButton);

        transferButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/magnetpwns/presentation/transfer24.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(transferButton, org.openide.util.NbBundle.getMessage(StockTopComponent.class, "StockTopComponent.transferButton.text")); // NOI18N
        transferButton.setToolTipText(org.openide.util.NbBundle.getMessage(StockTopComponent.class, "StockTopComponent.transferButton.toolTipText")); // NOI18N
        transferButton.setEnabled(false);
        transferButton.setFocusable(false);
        transferButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transferButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        transferButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(transferButton);

        stockTable.setAutoCreateRowSorter(true);
        stockTable.setModel(stockTableModel = new StockTableModel(AquamarinFacade.getDefault().findStockOwners()));
        jScrollPane1.setViewportView(stockTable);

        org.openide.awt.Mnemonics.setLocalizedText(transferLabel, org.openide.util.NbBundle.getMessage(StockTopComponent.class, "StockTopComponent.transferLabel.text")); // NOI18N

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);

        transferHistoryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/magnetpwns/presentation/list24.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(transferHistoryButton, org.openide.util.NbBundle.getMessage(StockTopComponent.class, "StockTopComponent.transferHistoryButton.text")); // NOI18N
        transferHistoryButton.setToolTipText(org.openide.util.NbBundle.getMessage(StockTopComponent.class, "StockTopComponent.transferHistoryButton.toolTipText")); // NOI18N
        transferHistoryButton.setFocusable(false);
        transferHistoryButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transferHistoryButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        transferHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferHistoryButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(transferHistoryButton);

        yearComboBox.setFont(Fonts.BIG_INPUT);
        yearComboBox.setModel(new DefaultComboBoxModel(AquamarinFacade.getDefault().findStockTransferYears().toArray()));
        yearComboBox.setPreferredSize(new java.awt.Dimension(100, 20));
        jToolBar2.add(yearComboBox);

        refreshYearButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/magnetpwns/presentation/refresh24.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(refreshYearButton, org.openide.util.NbBundle.getMessage(StockTopComponent.class, "StockTopComponent.refreshYearButton.text")); // NOI18N
        refreshYearButton.setFocusable(false);
        refreshYearButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        refreshYearButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        refreshYearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshYearButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(refreshYearButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(transferLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(transferLabel)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private Stock getSelectedStock() {
        Client selectedClient = stockTableModel.get(stockTable.convertRowIndexToModel(stockTable.getSelectedRow()));
        return AquamarinFacade.getDefault().findStock(selectedClient);
    }
    
    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        new StockDialog(getSelectedStock()).show();
    }//GEN-LAST:event_openButtonActionPerformed

    private void transferButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferButtonActionPerformed
        if (sourceStock == null) {
            sourceStock = getSelectedStock();
            transferLabel.setText(sourceStock.getOwner().toString() + " -> ");
            transferButton.setEnabled(false);
        } else {
            new StockTransferDialog(sourceStock, getSelectedStock()).show();
            sourceStock = null;
            transferLabel.setText("-");
        }
    }//GEN-LAST:event_transferButtonActionPerformed

    private void favoriteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_favoriteButtonActionPerformed
        Client selectedClient = stockTableModel.get(stockTable.convertRowIndexToModel(stockTable.getSelectedRow()));
        NbPreferences.forModule(StockTopComponent.class).putInt("favoriteStockOwner", selectedClient.getId().getId());
        transferFavoriteButton.setEnabled(false);
    }//GEN-LAST:event_favoriteButtonActionPerformed

    private void transferFavoriteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferFavoriteButtonActionPerformed
        Client favoriteClient = AquamarinFacade.getDefault().findClient(new ClientId(favoriteStockOwnerId));
        Stock favoriteStock = AquamarinFacade.getDefault().findStock(favoriteClient);
        new StockTransferDialog(favoriteStock, getSelectedStock()).show();
    }//GEN-LAST:event_transferFavoriteButtonActionPerformed

    private void transferHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferHistoryButtonActionPerformed
        //new StockTransferHistoryDialog().show();
        new StockTransferHistoryDialog((Integer) yearComboBox.getSelectedItem()).show();
    }//GEN-LAST:event_transferHistoryButtonActionPerformed

    private void refreshYearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshYearButtonActionPerformed
        yearComboBox.setModel(new DefaultComboBoxModel(AquamarinFacade.getDefault().findStockTransferYears().toArray()));
    }//GEN-LAST:event_refreshYearButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton favoriteButton;
    private javax.swing.JButton filterButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JButton openButton;
    private javax.swing.JButton refreshYearButton;
    private javax.swing.JTable stockTable;
    private javax.swing.JButton transferButton;
    private javax.swing.JButton transferFavoriteButton;
    private javax.swing.JButton transferHistoryButton;
    private javax.swing.JLabel transferLabel;
    private javax.swing.JComboBox yearComboBox;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
